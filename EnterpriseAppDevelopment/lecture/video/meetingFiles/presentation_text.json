{"d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1584982775936":{"slide-1":"Tutorials/Tutoriales/Anleitungen/‫دروس‬/Tutoriais/ Tutoriels www.bongolearn.com/virtualclassroom\n","slide-2":"","slide-3":"","slide-4":"","slide-5":"","slide-6":"","slide-7":"","slide-8":"","slide-9":"","slide-10":""},"c1b77afdf817e392070fda0a9eea1e19bf70570c-1584982808933":{"slide-1":"","slide-2":"Authentication\n","slide-3":"1. create the login form\n– Don’t forget the HTML <input type = “password”>\n2. validate the fields on the client-side\n– JavaScript Validation API, Angular…\n– <input> required, lengths, type…\n3. send the form data to the server by POST\n– HTTPS will send the form data encrypted *\n– e.g. <form method=\"post\" action=\"/login\">\nAuthentication - Client\n","slide-4":"4. validate again and sanitize the fields on the\nserver\n5. compute the hash of the sent password\n6. compare the received details with the values\nstored in your database\n7. if the values match, set the session variables\n– allow access to the resources/routes that require\nauthentication\n8. on log out, destroy the session variables\nAuthentication - Server\n","slide-5":"Authentication\n","slide-6":"JavaScript Validation API\n<!DOCTYPE html>\n<html>\n<body>\n<p>Enter a number and click OK:</p>\n<input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" required>\n<button onclick=\"myFunction()\">OK</button>\n<p>If the number is less than 100 or greater than 300, an error message will be displayed.</p>\n<p id=\"demo\"></p>\n<script>\nfunction myFunction() {\ninpObj = document.getElementById(\"id1\");\nif (!inpObj.checkValidity()) {\ndocument.getElementById(\"demo\").innerHTML = inpObj.validationMessage;\n} else document.getElementById(\"demo\").innerHTML = \"Input OK\";\n}\n</script>\n</body>\n</html>\n","slide-7":"Validation HTML Input Attributes\npattern=\"[A-Za-z]{3}\" // 3 letters\nA String pattern is like a regular expression, with \"\" instead of /^ $/\n","slide-8":"Regular Expressions\nStarts and ends with /\n^ is the beginning\n+ is one or more times the previous\n* is zero or more times the previous\n$ is the end\n/^[0-9]+$/\nat least one numeric char long\n/^[a-zA-Z]+$/\nboth lowercase and uppercase letters\n/^[0-9a-zA-Z]+$/\nnumbers and letters\n","slide-9":"Regular Expressions:\nhttps://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\nTest Regular Expressions: https://regex101.com/\nYour user’s passwords should have minimum lengths and\nformat requirements, which you can check with regular\nexpressions.\nRegular Expressions\n","slide-10":"Validation CSS Pseudo Selectors\nselector:pseudo-class {\nproperty:value;\n}\ninput:invalid Selects all <input> elements with an invalid value\n","slide-11":"Input Validation\n• Client-side validation is performed to enhance\nthe user experience and save bandwidth\n– Provide immediate feedback\n– Save trips to the server\n• However, you must always perform server-\nside validation as well, for security reasons\n– JavaScript can be bypassed\n– Input sanitization\n• Avoid code injection, cross-site scripting\n","slide-12":"Password Hashes on Node.js\n• In the DB, keep the passwords hashed\n– bcrypt is the de facto way to hash passwords\n– store the result in a field with ~255 characters\n• https://www.npmjs.com/package/bcrypt\nbcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {\n// Store hash in your password DB.\n});\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n// hash is loaded from your DB.\nbcrypt.compare(myPlaintextPassword, hash, function(err, result) {\nif(result) {\n// Passwords match\n} else {\n// Passwords don't match\n}\n});\n","slide-13":"Sessions\n","slide-14":"• Sessions set a user-key/ID on the user's computer\n– Web storage: client-side sessions, to allow separate instances of the same\nweb app to run in different windows without interfering with each other\n– Traditional cookies: communication with server\n• When you open a page, it scans the computer for a user-key.\n– If there is a match, it accesses that session\n– If not, it starts a new session\n• Session data is not saved in the cookie, just the session ID\n• Session data is stored server-side\n– You might recall $_SESSION from PHP:\n• $_SESSION[\"favanimal\"] = \"cat\";\n– In Node/Express, you need to add an appropriate store to manage this data\n• The most popular is Redis\n– Officially, Redis is not supported on Windows, but you can still install it:\nhttps://redislabs.com/blog/redis-on-windows-8-1-and-previous-versions/\nhttps://www.redislabs.com/blog/redis-on-windows-10/\nSessions\n","slide-15":"• The HTTP protocol is stateless\n– originally only static pages were served upon request\n• With the development of personalization, in order to maintain\ninformation on the server about state (authentication, number of\nvisits, preferences…), cookies were created\n• They are a mechanism for servers to both store and retrieve\ninformation on the client-side, until they expire\n• A server can send cookies to the client\n– If the browser accepts it, it is stored as plain text\n– Then, in subsequent visits, the browser sends the same cookie to the server.\n• A cookie can also be created by client-side JavaScript; if so, it can\nbe read/written to by the client, as well as by the server\n– document.cookie = \"key1=value1;key2=value2;expires=date\";\n– when you read the cookie , you can only see the key=value bits\n– it works as a String that you can append more key=value(s) to\nHTTP Cookies\n","slide-16":"How Cookies Work\n","slide-17":"Cookies\n• Cookie parameters (all optional except the last):\n– Expires: The date the cookie will expire. If this is blank, the\ncookie will expire and be deleted when the visitor closes the\nbrowser: a session cookie\n• when Chrome or Firefox are configured to reopen tabs from\nlast time upon start, they will keep session cookies when\nclosing the browser, making them act as persistent cookies\n– Domain: The domain name of the website.\n– Path: The path to the directory or web page that set the cookie.\nBy default it is '/' , so you can retrieve the cookie from any\ndirectory or page.\n– Secure: If the cookie contains the word \"Secure\", the cookie\nmay only be retrieved with a secure server (HTTPS).\n","slide-18":"Cookies\n– Secure: If the cookie contains the word \"Secure\", the cookie\nmay only be retrieved with a secure server (HTTPS).\n– HttpOnly: directs browsers not to expose cookies through\nchannels other than HTTP (and HTTPS) requests, and thus not\naccessible via JavaScript (using document.cookie)\n– Name=Value: cookies have the form of key and value pairs.\nValues may not include semicolons, commas, or whitespace.\n• Browsers do not send the cookie attributes back to the server, just\nname and value.\n• The attributes are used by the browser to determine when to\ndelete a cookie, accept or block a cookie, etc.\n• Beware of the EU Cookie Laws and GDPR!\n– Requires asking permission from users before planting cookies, and\nincluding details on their purpose.\n","slide-19":"Express Sessions\n• https://www.npmjs.com/package/express-session\n• The default cookie settings are { path: '/', httpOnly: true,\nsecure: false, maxAge: null }.\n• maxAge is the number of milliseconds to add to the current\ndate to calculate the Expires parameter\n• The default name of the cookie is 'connect.sid'.\nnpm install express-session\nvar session = require('express-session');\nvar app = express();\napp.use(session({\nsecret: 'keyboard cat', // used to sign the session ID cookie\nresave: false, // session NOT saved back to the store if not modified\nsaveUninitialized: true, // choosing false is useful for login sessions\ncookie: { maxAge: 60000 }\n}));\n","slide-20":"Redis Data Store\n• https://www.npmjs.com/package/connect-redis\nnpm install redis connect-redis\nC:\\Program Files\\Redis>redis-server\n• To store or access session data, use req.session (in JSON)\nconst redis = require('redis');\nconst session = require('express-session');\nlet RedisStore = require('connect-redis')(session);\nlet redisClient = redis.createClient();\napp.use(\nsession({\nstore: new RedisStore({ client: redisClient }), // default host: 'localhost', port: 6379\nsecret: 'keyboard cat',\nresave: false,\nsaveUninitialized: true\n});\n);\n","slide-21":"let RedisStore = require('connect-redis')(session);\nlet redisClient = redis.createClient();\napp.use(\nsession({\nstore: new RedisStore({ client: redisClient }),\nsecret: 'keyboard cat',\nresave: false,\nsaveUninitialized: true\n})\n);\napp.use(function (req, res, next) {\nif (!req.session.views)\nreq.session.views = {};\nvar pathname = parseurl(req).pathname;\nreq.session.views[pathname] = (req.session.views[pathname] || 0) + 1;\nnext();\n});\napp.get('/foo', function (req, res, next) {\nres.send('you viewed this page ' + req.session.views['/foo'] + ' times');\n});\napp.get('/bar', function (req, res, next) {\nres.send('you viewed this page ' + req.session.views['/bar'] + ' times');\n});\nExample: visit counter per route\n","slide-22":"Destroy Session\n• Session.destroy(callback);\n– Destroys the session and will unset the req.session property.\n– Once complete, the callback will be invoked.\n– Example:\napp.post(\"/logout\", function (req, res){\nreq.session.destroy( function (err) {\nif(err) return console.log(err);\nres.send(\"You have been logged out.\");\n});\n});\n","slide-23":"Questions?\n"}}
